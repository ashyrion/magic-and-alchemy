import { useEffect, useState } from 'react';
import GameLayout from './components/layout/GameLayout';
import { BattleScreen } from './components/battle/BattleScreen';
import AlchemyWorkshop from './components/AlchemyWorkshop';
import { DungeonExplorer } from './components/dungeon/DungeonExplorer';
import { useGameStore } from './store/gameStore';
import { useInventoryStore } from './store/inventoryStore';
import { useBattleStore } from './store/battleStore';
import { useDungeonStore } from './store/dungeonStore';
import { useAlchemyStore } from './stores/alchemyStore';
import { testCharacter, testItems, testMaterials, testSkills } from './data/testData';
import './App.css';

function App() {
  const [activeTab, setActiveTab] = useState<'battle' | 'alchemy' | 'dungeon'>('dungeon');
  const [lastActiveTab, setLastActiveTab] = useState<'battle' | 'alchemy' | 'dungeon'>('dungeon');
  
  // Ïä§ÌÜ†Ïñ¥ÏóêÏÑú ÌïÑÏöîÌïú Ïï°ÏÖò Í∞ÄÏ†∏Ïò§Í∏∞
  const setCharacter = useGameStore((state) => state.setCharacter);
  const { addItem, addMaterial } = useInventoryStore();
  const startDungeon = useDungeonStore((state) => state.startDungeon);
  const initializeAlchemy = useAlchemyStore((state) => state.initializeAlchemy);
  
  // Ï†ÑÌà¨ ÏÉÅÌÉú Íµ¨ÎèÖ
  const inBattle = useBattleStore((state) => state.inBattle);
  const isInDungeon = useDungeonStore((state) => state.isInDungeon);

  // ÏûêÎèô ÌÉ≠ Ï†ÑÌôò Î°úÏßÅ (Ï†ÑÌà¨Î∞©ÏóêÏÑúÎßå)
  useEffect(() => {
    const dungeonStore = useDungeonStore.getState();
    const currentRoom = dungeonStore.getCurrentRoom();
    const isBattleRoom = currentRoom && (currentRoom.type === 'battle' || currentRoom.type === 'boss');
    
    if (inBattle && isInDungeon && isBattleRoom && activeTab === 'dungeon') {
      // ÎçòÏ†ÑÏùò Ï†ÑÌà¨Î∞©ÏóêÏÑú Ï†ÑÌà¨ ÏãúÏûë ÏãúÏóêÎßå Ï†ÑÌà¨ ÌÉ≠ÏúºÎ°ú ÏûêÎèô Ï†ÑÌôò
      setLastActiveTab('dungeon');
      setActiveTab('battle');
    } else if (!inBattle && lastActiveTab === 'dungeon' && activeTab === 'battle') {
      // Ï†ÑÌà¨ Ï¢ÖÎ£å Ïãú ÎçòÏ†Ñ ÌÉ≠ÏúºÎ°ú Î≥µÍ∑Ä
      setActiveTab('dungeon');
      setLastActiveTab('battle');
    }
  }, [inBattle, isInDungeon, activeTab, lastActiveTab]);

  // Ï¥àÍ∏∞ Ï†ÑÌà¨ ÏãúÏûë Ìï®Ïàò (Ï†úÍ±∞Îê® - ÎçòÏ†ÑÏóêÏÑúÎßå ÏãúÏûë)
  // const startInitialBattle = () => {
  //   // Ï¥àÍ∏∞ Ï†ÑÌà¨Îäî ÎçòÏ†ÑÏóêÏÑúÎßå ÏãúÏûëÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
  // };

  // Ï¥àÍ∏∞Ìôî Ïã§Ìñâ (Ï§ëÎ≥µ Î∞©ÏßÄ)
  useEffect(() => {
    const gameStore = useGameStore.getState();
    const inventoryStore = useInventoryStore.getState();
    
    // Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎêú Í≤ΩÏö∞ Í±¥ÎÑàÎõ∞Í∏∞
    if (gameStore.character || inventoryStore.items.length > 0) {
      return;
    }

    // Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Ï†ï
    setCharacter(testCharacter);

    // ÏïÑÏù¥ÌÖú Ï∂îÍ∞Ä
    testItems.forEach(item => {
      addItem(item);
    });

    // Ïû¨Î£å Ï∂îÍ∞Ä (Ïó∞Í∏àÏà†Ïö©) - ÌÖåÏä§Ìä∏Î•º ÏúÑÌï¥ ÎßéÏùÄ Ïñë Ï∂îÍ∞Ä
    testMaterials.forEach(material => {
      for (let i = 0; i < 10; i++) {
        addMaterial(material); // Í∞Å Ïû¨Î£åÎ•º 10Í∞úÏî© Ï∂îÍ∞Ä
      }
    });

    // Ïä§ÌÇ¨ Ï∂îÍ∞Ä
    testSkills.forEach(skill => gameStore.addSkill(skill));

    // Ïó∞Í∏àÏà† ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
    initializeAlchemy();

    // ÎçòÏ†ÑÎßå Ï¥àÍ∏∞Ìôî (Ï†ÑÌà¨Îäî ÎçòÏ†ÑÏóêÏÑú ÏãúÏûë)
    startDungeon();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const renderTabContent = () => {
    switch (activeTab) {
      case 'battle':
        return <BattleScreen />;
      case 'alchemy':
        return <AlchemyWorkshop />;
      case 'dungeon':
        return <DungeonExplorer />;
      default:
        return <BattleScreen />;
    }
  };

  return (
    <GameLayout>
      <div className="app-container">
        <div className="tab-navigation">
          <button 
            className={`tab-button ${activeTab === 'battle' ? 'active' : ''}`}
            onClick={() => setActiveTab('battle')}
          >
            ‚öîÔ∏è Ï†ÑÌà¨
          </button>
          <button 
            className={`tab-button ${activeTab === 'alchemy' ? 'active' : ''}`}
            onClick={() => setActiveTab('alchemy')}
          >
            üß™ Ïó∞Í∏àÏà†
          </button>
          <button 
            className={`tab-button ${activeTab === 'dungeon' ? 'active' : ''}`}
            onClick={() => setActiveTab('dungeon')}
          >
            üè∞ ÎçòÏ†Ñ
          </button>
        </div>
        
        <div className="tab-content">
          {renderTabContent()}
        </div>
      </div>
    </GameLayout>
  );
}

export default App;


