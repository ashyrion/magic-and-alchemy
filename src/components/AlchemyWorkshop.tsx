import React, { useState } from 'react';
import { useNewAlchemyStore } from '../stores/newAlchemyStore';
import { alchemyMaterials } from '../data/alchemyMaterials';
import type { ItemRarity } from '../stores/newAlchemyStore';
import { useInventoryStore } from '../store/inventoryStore';
import type { Item, Material, GeneratedItem, ItemRarity as GameItemRarity, ItemAffix } from '../types/gameTypes';
import { alchemyRecipes, newAlchemyRecipes, getPotionsByCategory } from '../data/alchemyRecipes';
import { generateUniversalItemTooltip } from '../utils/tooltipGenerator';
import { generateEnhancedItem, combineStats } from '../utils/itemGenerator';
import { rarityColors, rarityAffixRules } from '../data/itemAffixes';
import SkillEnhancementWorkshop from './SkillEnhancementWorkshop';
import './AlchemyWorkshop.stable.css';

// Ïû¨Î£å Ïä¨Î°Ø Ïª¥Ìè¨ÎÑåÌä∏ (Ïù∏Î≤§ÌÜ†Î¶¨ÏôÄ ÎèôÏùºÌïú ÌòïÌÉú)
interface MaterialSlotWithTooltipProps {
  material: Material;
  count: number;
}

const MaterialSlotWithTooltip: React.FC<MaterialSlotWithTooltipProps> = ({ material, count }) => {
  const [showTooltip, setShowTooltip] = useState(false);
  const [elementRect, setElementRect] = useState<DOMRect | null>(null);
  const [tooltipPosition, setTooltipPosition] = useState<'bottom' | 'top'>('bottom');

  const handleMouseEnter = (e: React.MouseEvent) => {
    const element = e.currentTarget as HTMLElement;
    const rect = element.getBoundingClientRect();
    const windowHeight = window.innerHeight;
    
    setElementRect(rect);
    
    const tooltipHeight = 300;
    const spaceBelow = windowHeight - rect.bottom;
    const spaceAbove = rect.top;
    
    if (spaceBelow < tooltipHeight && spaceAbove > spaceBelow) {
      setTooltipPosition('top');
    } else {
      setTooltipPosition('bottom');
    }
    setShowTooltip(true);
  };

  return (
    <div
      className="relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={() => setShowTooltip(false)}
    >
      <div className="bg-gray-700 border-2 border-gray-600 rounded-lg p-2 hover:border-blue-500 transition-colors cursor-pointer flex flex-col items-center justify-center h-20 w-16">
        <div className="flex flex-col items-center flex-grow justify-center">
          <div className="text-xl mb-1">
            {material.icon || 'üß™'}
          </div>
          <div className="text-xs font-medium text-center truncate leading-tight text-purple-300">
            {material.name}
          </div>
        </div>
        
        <div className="flex justify-center">
          <span className="bg-purple-500 text-white text-xs rounded-full px-2 py-1 min-w-6 text-center font-semibold shadow-sm">
            {count}
          </span>
        </div>
      </div>

      {/* Ìà¥ÌåÅ */}
      {showTooltip && (
        <div 
          style={{
            position: 'fixed',
            ...(tooltipPosition === 'bottom' && elementRect ? 
              { top: `${elementRect.bottom + 8}px` } : 
              elementRect ? { bottom: `${window.innerHeight - elementRect.top + 8}px` } : {}
            ),
            left: elementRect ? `${Math.min(elementRect.left, window.innerWidth - 320)}px` : '0px',
            zIndex: 1000,
            backgroundColor: '#1a1a1a',
            border: '2px solid #444',
            borderRadius: '8px',
            padding: '12px',
            minWidth: '280px',
            maxWidth: '320px',
            fontSize: '12px',
            lineHeight: '1.4',
            boxShadow: '0 8px 16px rgba(0,0,0,0.8)',
            maxHeight: '380px',
            overflowY: 'auto',
            color: 'white'
          }}
          dangerouslySetInnerHTML={{
            __html: generateUniversalItemTooltip(material, count)
          }}
        />
      )}
    </div>
  );
};

// ÏÑ†ÌÉù Í∞ÄÎä•Ìïú ÏïÑÏù¥ÌÖú Ìï≠Î™© (Ìà¥ÌåÅ Ìè¨Ìï®)
interface SelectableItemProps {
  item: Item | GeneratedItem;
  isSelected: boolean;
  onClick: () => void;
}

const SelectableItem: React.FC<SelectableItemProps> = ({ item, isSelected, onClick }) => {
  const [showTooltip, setShowTooltip] = useState(false);
  const [elementRect, setElementRect] = useState<DOMRect | null>(null);
  const [tooltipPosition, setTooltipPosition] = useState<'bottom' | 'top'>('bottom');

  const handleMouseEnter = (e: React.MouseEvent) => {
    const element = e.currentTarget as HTMLElement;
    const rect = element.getBoundingClientRect();
    const windowHeight = window.innerHeight;
    
    setElementRect(rect);
    
    const tooltipHeight = 300;
    const spaceBelow = windowHeight - rect.bottom;
    const spaceAbove = rect.top;
    
    if (spaceBelow < tooltipHeight && spaceAbove > spaceBelow) {
      setTooltipPosition('top');
    } else {
      setTooltipPosition('bottom');
    }
    setShowTooltip(true);
  };

  // ÏïÑÏù¥ÌÖú Ï†ïÎ≥¥ Ï∂îÏ∂ú
  const rarity = item.rarity || 'common';
  
  const isGeneratedItem = 'displayName' in item && 'colorCode' in item;
  const generatedItem = isGeneratedItem ? item as GeneratedItem : null;
  const displayName = generatedItem?.displayName || item.name;
  const itemColor = generatedItem?.colorCode || rarityColors[rarity as GameItemRarity] || '#ffffff';

  return (
    <div
      className="relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={() => setShowTooltip(false)}
    >
      <div 
        className={`flex items-center p-2 bg-gray-700 rounded-lg transition-all cursor-pointer border ${
          isSelected ? 'border-blue-500 bg-blue-900/30' : 'border-gray-600 hover:bg-gray-600'
        }`}
        onClick={onClick}
      >
        <div className="text-lg mr-3">{item.icon || 'üì¶'}</div>
        <div className="flex-1">
          <div 
            className="text-sm font-medium truncate"
            style={{ color: itemColor }}
          >
            {displayName}
          </div>
          <div className="text-xs text-gray-400">
            {item.type === 'weapon' ? 'Î¨¥Í∏∞' : 
             item.type === 'armor' ? 'Î∞©Ïñ¥Íµ¨' : 
             item.type === 'accessory' ? 'Ïû•Ïã†Íµ¨' : item.type}
          </div>
        </div>
      </div>

      {/* Ìà¥ÌåÅ */}
      {showTooltip && (
        <div 
          style={{
            position: 'fixed',
            ...(tooltipPosition === 'bottom' && elementRect ? 
              { top: `${elementRect.bottom + 8}px` } : 
              elementRect ? { bottom: `${window.innerHeight - elementRect.top + 8}px` } : {}
            ),
            left: elementRect ? `${Math.min(elementRect.left, window.innerWidth - 320)}px` : '0px',
            zIndex: 1000,
            backgroundColor: '#1a1a1a',
            border: '2px solid #444',
            borderRadius: '8px',
            padding: '12px',
            minWidth: '280px',
            maxWidth: '320px',
            fontSize: '12px',
            lineHeight: '1.4',
            boxShadow: '0 8px 16px rgba(0,0,0,0.8)',
            maxHeight: '380px',
            overflowY: 'auto',
            color: 'white'
          }}
          dangerouslySetInnerHTML={{
            __html: generateUniversalItemTooltip(item)
          }}
        />
      )}
    </div>
  );
};

// Í∞ïÌôîÌï† ÏïÑÏù¥ÌÖú Ïä¨Î°Ø Ïª¥Ìè¨ÎÑåÌä∏ (ÏïÑÏù¥ÏΩò + Ïù¥Î¶Ñ + Ìà¥ÌåÅ)
interface UpgradeItemSlotProps {
  item: Item | GeneratedItem;
  onCancel: () => void;
}

const UpgradeItemSlot: React.FC<UpgradeItemSlotProps> = ({ item, onCancel }) => {
  const [showTooltip, setShowTooltip] = useState(false);
  const [elementRect, setElementRect] = useState<DOMRect | null>(null);
  const [tooltipPosition, setTooltipPosition] = useState<'bottom' | 'top'>('bottom');

  const handleMouseEnter = (e: React.MouseEvent) => {
    const element = e.currentTarget as HTMLElement;
    const rect = element.getBoundingClientRect();
    const windowHeight = window.innerHeight;
    
    setElementRect(rect);
    
    const tooltipHeight = 300;
    const spaceBelow = windowHeight - rect.bottom;
    const spaceAbove = rect.top;
    
    if (spaceBelow < tooltipHeight && spaceAbove > spaceBelow) {
      setTooltipPosition('top');
    } else {
      setTooltipPosition('bottom');
    }
    setShowTooltip(true);
  };

  // ÏïÑÏù¥ÌÖú Ï†ïÎ≥¥ Ï∂îÏ∂ú
  const isGeneratedItem = 'displayName' in item && 'colorCode' in item;
  const generatedItem = isGeneratedItem ? item as GeneratedItem : null;
  const displayName = generatedItem?.displayName || item.name;
  const rarity = item.rarity || 'common';
  const itemColor = generatedItem?.colorCode || rarityColors[rarity as GameItemRarity] || '#ffffff';
  const itemIcon = item.icon || 'üì¶';

  return (
    <div
      className="relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={() => setShowTooltip(false)}
    >
      <div className="upgrade-item-slot">
        <div className="flex items-center p-3 bg-gray-700 rounded-lg border-2 border-gray-600">
          <div className="text-2xl mr-3">{itemIcon}</div>
          <div className="flex-1">
            <div 
              className="text-base font-medium"
              style={{ color: itemColor }}
            >
              {displayName}
            </div>
            <div className="text-sm text-gray-400">
              {item.type === 'weapon' ? 'Î¨¥Í∏∞' : 
               item.type === 'armor' ? 'Î∞©Ïñ¥Íµ¨' : 
               item.type === 'accessory' ? 'Ïû•Ïã†Íµ¨' : item.type}
            </div>
          </div>
          <button
            onClick={onCancel}
            className="ml-3 px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
          >
            Ï∑®ÏÜå
          </button>
        </div>
      </div>

      {/* Ìà¥ÌåÅ */}
      {showTooltip && (
        <div 
          style={{
            position: 'fixed',
            ...(tooltipPosition === 'bottom' && elementRect ? 
              { top: `${elementRect.bottom + 8}px` } : 
              elementRect ? { bottom: `${window.innerHeight - elementRect.top + 8}px` } : {}
            ),
            left: elementRect ? `${Math.min(elementRect.left, window.innerWidth - 320)}px` : '0px',
            zIndex: 1000,
            backgroundColor: '#1a1a1a',
            border: '2px solid #444',
            borderRadius: '8px',
            padding: '12px',
            minWidth: '280px',
            maxWidth: '320px',
            fontSize: '12px',
            lineHeight: '1.4',
            boxShadow: '0 8px 16px rgba(0,0,0,0.8)',
            maxHeight: '380px',
            overflowY: 'auto',
            color: 'white'
          }}
          dangerouslySetInnerHTML={{
            __html: generateUniversalItemTooltip(item)
          }}
        />
      )}
    </div>
  );
};

const AlchemyWorkshop: React.FC = () => {
  const {
    // upgradeSkill, // Ïä§ÌÇ¨ Í∞ïÌôî ÏãúÏä§ÌÖúÏóêÏÑú ÏßÅÏ†ë Ï≤òÎ¶¨
    lastCraftResult,
    knownRecipes
  } = useNewAlchemyStore();
  


  const { materials: inventoryMaterials, addItem, items: inventoryItems, removeMaterial, removeItem, addMaterial } = useInventoryStore();
  // const { learnedSkills } = useGameStore(); // Ïä§ÌÇ¨ Í∞ïÌôî ÏãúÏä§ÌÖúÏóêÏÑú ÏßÅÏ†ë Ï≤òÎ¶¨

  // inventoryStore Í∏∞Ï§ÄÏúºÎ°ú Îã®ÏàúÌôî (ÎèôÍ∏∞Ìôî Î°úÏßÅ Ï†úÍ±∞)

  const [activeTab, setActiveTab] = useState<'craft' | 'upgrade-item' | 'upgrade-skill'>('craft');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [selectedUpgradeType, setSelectedUpgradeType] = useState<'normal-to-magic' | 'magic-to-rare' | 'rare-to-unique' | null>(null);
  const [selectedUpgradeItemId, setSelectedUpgradeItemId] = useState<string | null>(null);
  
  // Î™®Îã¨ ÏÉÅÌÉú
  const [showResultModal, setShowResultModal] = useState(false);
  const [modalResult, setModalResult] = useState<{
    success: boolean;
    title: string;
    message: string;
  } | null>(null);

  // subscribe directly to skills so UI updates reactively
  // const canUpgradeSkill = useNewAlchemyStore(state => state.canUpgradeSkill); // Ïä§ÌÇ¨ Í∞ïÌôî ÏãúÏä§ÌÖúÏóêÏÑú ÏßÅÏ†ë Ï≤òÎ¶¨

  // Ïû¨Î£å Í∞úÏàòÎ•º ÏÑ∏Îäî Ìó¨Ìçº Ìï®Ïàò (inventoryStore Í∏∞Ï§Ä)
  const getMaterialCount = (materialId: string): number => {
    return inventoryMaterials.reduce((count, material) => {
      if (material.id === materialId) return count + 1;
      return count;
    }, 0);
  };

  // Îì±Í∏âÏùÑ ÌïúÍ∏ÄÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
  const getRarityKoreanName = (rarity: string): string => {
    const rarityNames: Record<string, string> = {
      'common': 'ÏùºÎ∞òÎì±Í∏â',
      'magic': 'Îß§ÏßÅÎì±Í∏â', 
      'rare': 'Î†àÏñ¥Îì±Í∏â',
      'unique': 'Ïú†ÎãàÌÅ¨Îì±Í∏â'
    };
    return rarityNames[rarity] || rarity;
  };

  // AlchemyMaterialÏùÑ MaterialÎ°ú Î≥ÄÌôò
  const convertToMaterial = (alchemyMaterial: typeof alchemyMaterials[0]): Material => {
    // AlchemyMaterial rarityÎ•º ItemRarityÎ°ú Î≥ÄÌôò
    const rarityMapping: Record<string, GameItemRarity> = {
      'common': 'common',
      'uncommon': 'magic',
      'rare': 'rare', 
      'epic': 'rare',
      'legendary': 'unique'
    };
    
    return {
      id: alchemyMaterial.id,
      name: alchemyMaterial.name,
      description: alchemyMaterial.description,
      type: 'material' as const,
      weight: 0.1,
      icon: alchemyMaterial.icon,
      rarity: rarityMapping[alchemyMaterial.rarity] || 'common',
      effects: []
    };
  };

  // Ìè¨ÏÖò Ïù¥Î¶Ñ Î≥ÄÌôò Ìó¨Ìçº Ìï®Ïàò
  const getPotionDisplayName = (potionId: string): string => {
    // Í∏∞Ï°¥ alchemyRecipesÏóêÏÑú Ï∞æÍ∏∞
    const oldRecipe = alchemyRecipes.find(recipe => recipe.result.id === potionId);
    if (oldRecipe) {
      return oldRecipe.result.name;
    }
    
    // newAlchemyRecipesÏóêÏÑú Ï∞æÍ∏∞
    const newRecipe = newAlchemyRecipes.find(recipe => 
      recipe.results.some(result => result.id === potionId)
    );
    if (newRecipe) {
      return newRecipe.name;
    }
    
    // Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞ IDÎ•º Ïù¥Î¶ÑÏúºÎ°ú Î≥ÄÌôò
    return potionId.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  // Îì±Í∏âÎ≥Ñ ÏµúÎåÄ Ï†ëÏÇ¨ Í∞úÏàò Ï†úÌïú Ìï®Ïàò
  const limitAffixesByRarity = (
    prefixes: ItemAffix[], 
    suffixes: ItemAffix[], 
    rarity: ItemRarity
  ): { prefixes: ItemAffix[], suffixes: ItemAffix[] } => {
    const rules = rarityAffixRules[rarity as keyof typeof rarityAffixRules];
    if (!rules) return { prefixes, suffixes };
    
    // Ï§ëÎ≥µ Ï†úÍ±∞ - affixÏùò Ïù¥Î¶ÑÏúºÎ°ú Ï§ëÎ≥µ Ï≤¥ÌÅ¨
    const uniquePrefixes = prefixes.filter((prefix, index, self) =>
      index === self.findIndex(p => p.name === prefix.name)
    );
    const uniqueSuffixes = suffixes.filter((suffix, index, self) =>
      index === self.findIndex(s => s.name === suffix.name)
    );
    
    return {
      prefixes: uniquePrefixes.slice(0, rules.prefixes.max),
      suffixes: uniqueSuffixes.slice(0, rules.suffixes.max)
    };
  };

  // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î†àÏãúÌîºÎì§ Í∞ÄÏ†∏Ïò§Í∏∞ (Ïπ¥ÌÖåÍ≥†Î¶¨ ÏãúÏä§ÌÖúÏúºÎ°ú ÎåÄÏ≤¥Îê®)

  const handleCraft = (recipeId: string) => {
    // Ï†úÏûë Ï†Ñ Ïû¨Î£å ÌôïÏù∏ Î∞è ÏÜåÎ™®
    const recipe = newAlchemyRecipes.find(r => r.id === recipeId);
    if (!recipe) return;

    // Ïû¨Î£å Î≥¥Ïú† ÌôïÏù∏
    const canCraft = recipe.materials.every((mat) => 
      getMaterialCount(mat.id) >= mat.count
    );

    if (!canCraft) {
      console.log('Ïû¨Î£å Î∂ÄÏ°±ÏúºÎ°ú Ï†úÏûë Î∂àÍ∞Ä');
      return;
    }

    // inventoryStoreÏóêÏÑú Ïû¨Î£å ÏÜåÎ™®
    recipe.materials.forEach(material => {
      for (let i = 0; i < material.count; i++) {
        removeMaterial(material.id);
      }
    });

    // ÏÑ±Í≥µÎ•† Ï≤¥ÌÅ¨ (ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú)
    const isSuccess = Math.random() * 100 < recipe.successRate;
    
    if (isSuccess) {
      console.log('Ï†úÏûë ÏÑ±Í≥µ!');
      
      // ÏÑ±Í≥µ Ïãú Ìè¨ÏÖòÏùÑ Ïù∏Î≤§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä
      if (recipe.results) {
        recipe.results.forEach(resultItem => {
          // countÎßåÌÅº ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
          for (let i = 0; i < resultItem.count; i++) {
            // Í∏∞Ï°¥ alchemyRecipesÏóêÏÑú Ìè¨ÏÖò Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
            let potionRecipe = alchemyRecipes.find(recipe => recipe.result.id === resultItem.id);
            
            // ÏÉàÎ°úÏö¥ ÏãúÏä§ÌÖú Î†àÏãúÌîºÏóêÏÑúÎèÑ Ï∞æÍ∏∞
            if (!potionRecipe) {
              const newRecipe = newAlchemyRecipes.find(recipe => 
                recipe.results.some(result => result.id === resultItem.id)
              );
              
              if (newRecipe) {
                // newAlchemyRecipeÎ•º Í∏∞Ï°¥ Recipe ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                potionRecipe = {
                  id: newRecipe.id,
                  name: newRecipe.name,
                  materials: [],
                  result: {
                    id: resultItem.id,
                    name: newRecipe.name,
                    type: 'consumable' as const,
                    weight: 0.2,
                    description: newRecipe.description,
                    stats: {}
                  }
                };
              }
            }
            
            if (potionRecipe) {
              // Î†àÏãúÌîºÏóêÏÑú Ï∞æÏùÄ Í≤ΩÏö∞
              const potionItem: Item = {
                ...potionRecipe.result,
                originalId: resultItem.id,
                instanceId: `${resultItem.id}-${Date.now()}`,
              };
              addItem(potionItem);
            } else {
              // Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞ Í∏∞Î≥∏ Ìè¨ÏÖò ÏÉùÏÑ±
              const item: Item = {
                id: resultItem.id,
                name: resultItem.id.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase()),
                type: 'consumable',
                weight: 0.1,
                originalId: resultItem.id,
                description: `${resultItem.id} Ìè¨ÏÖò`,
                instanceId: `${resultItem.id}-${Date.now()}`,
                rarity: 'common',
                stats: {},
              };
              addItem(item);
            }
          }
        });
      }

      setModalResult({ 
        success: true, 
        title: 'ÏÑ±Í≥µ', 
        message: 'Ìè¨ÏÖò Ï†úÏûëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!' 
      });
      setShowResultModal(true);
      setTimeout(() => setShowResultModal(false), 2000);
    } else {
      console.log('Ï†úÏûë Ïã§Ìå®!');
      setModalResult({ 
        success: false, 
        title: 'Ïã§Ìå®', 
        message: 'Ìè¨ÏÖò Ï†úÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.' 
      });
      setShowResultModal(true);
      setTimeout(() => setShowResultModal(false), 2000);
    }
  };

  const handleUpgradeItem = (upgradeTo: ItemRarity) => {
    console.log('=== Í∞ïÌôî ÏãúÏûë ===');
    console.log('ÏÑ†ÌÉùÎêú ÏïÑÏù¥ÌÖú ID:', selectedUpgradeItemId);
    console.log('Î™©Ìëú Îì±Í∏â:', upgradeTo);
    
    if (!selectedUpgradeItemId) {
      console.log('ÏÑ†ÌÉùÎêú ÏïÑÏù¥ÌÖú IDÍ∞Ä ÏóÜÏäµÎãàÎã§');
      return;
    }

    const selectedItem = inventoryItems.find(item => item.instanceId === selectedUpgradeItemId);
    console.log('Ï∞æÏùÄ ÏïÑÏù¥ÌÖú:', selectedItem);
    
    if (!selectedItem) {
      console.log('ÏïÑÏù¥ÌÖúÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
      return;
    }
    
    // Ïû¨Î£å ÌôïÏù∏ Î∞è ÏÜåÎ™® Î°úÏßÅÏùÑ ÏßÅÏ†ë Íµ¨ÌòÑ
    const requirements = alchemyMaterials
      .slice(0, 3)
      .map(mat => ({ materialId: mat.id, count: 5 }));

    // Ïû¨Î£å Ï∂©Î∂ÑÌïúÏßÄ ÌôïÏù∏
    console.log('ÌïÑÏöîÌïú Ïû¨Î£å:', requirements);
    
    const canUpgrade = requirements.every(req => {
      const currentCount = getMaterialCount(req.materialId) || 0;
      const hasEnough = currentCount >= req.count;
      console.log(`Ïû¨Î£å ${req.materialId}: ${currentCount}/${req.count}, Ï∂©Ï°±: ${hasEnough}`);
      return hasEnough;
    });

    if (!canUpgrade) {
      console.log('Ïû¨Î£åÍ∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§');
      alert('Í∞ïÌôîÏóê ÌïÑÏöîÌïú Ïû¨Î£åÍ∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!');
      return;
    }

    // ÏÑ±Í≥µÎ•† Í≥ÑÏÇ∞ (75%)
    const successRate = 75;
    const isSuccess = Math.random() * 100 < successRate;

    // Ïû¨Î£å ÏÜåÎ™® (ÏÑ±Í≥µ/Ïã§Ìå® Í≥µÌÜµ)
    // Ïã§Ìå® ÏãúÏóêÎäî ÏùºÎ∂ÄÎßå ÏÜåÎ™®ÎêòÎèÑÎ°ù ÏïÑÎûòÏóêÏÑú Ï≤òÎ¶¨
    requirements.forEach(req => {
      for (let i = 0; i < req.count; i++) {
        removeMaterial(req.materialId);
      }
    });

    if (isSuccess) {
      // Í∏∞Ï°¥ ÏÜçÏÑ± Ïú†ÏßÄ ÏóÖÍ∑∏Î†àÏù¥Îìú Î°úÏßÅ
      let upgradedItem: GeneratedItem;
      
      if ('displayName' in selectedItem && 'rarity' in selectedItem) {
        // Ïù¥ÎØ∏ GeneratedItemÏù∏ Í≤ΩÏö∞ - Í∏∞Ï°¥ Ï†ëÏÇ¨ Ïú†ÏßÄÌïòÎ©¥ÏÑú ÏÉàÎ°úÏö¥ Ï†ëÏÇ¨ Ï∂îÍ∞Ä
        const currentItem = selectedItem as GeneratedItem;
        
        // ÏÉàÎ°úÏö¥ Ï†ëÏÇ¨Î•º ÏúÑÌï¥ ÏûÑÏãúÎ°ú Í∏∞Î≥∏ ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
        const baseItem: Item = {
          id: currentItem.id,
          name: currentItem.name,
          type: currentItem.type,
          weight: currentItem.weight || 1,
          requiredLevel: currentItem.requiredLevel || 1,
          description: currentItem.description,
          icon: currentItem.icon,
          stats: currentItem.baseStats || {},
          instanceId: currentItem.instanceId
        };
        
        // ÏÉàÎ°úÏö¥ Îì±Í∏âÏóê ÎßûÎäî ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
        const newGeneratedItem = generateEnhancedItem(baseItem, upgradeTo as GameItemRarity);
        
        // Í∏∞Ï°¥ Ï†ëÏÇ¨ÏôÄ ÏÉàÎ°úÏö¥ Ï†ëÏÇ¨ Í≤∞Ìï©
        const combinedPrefixes = [...(currentItem.prefixes || []), ...(newGeneratedItem.prefixes || [])];
        const combinedSuffixes = [...(currentItem.suffixes || []), ...(newGeneratedItem.suffixes || [])];
        
        // Îì±Í∏âÎ≥Ñ ÏµúÎåÄ Ï†ëÏÇ¨ Í∞úÏàò Ï†úÌïú Ï†ÅÏö©
        const limitedAffixes = limitAffixesByRarity(
          combinedPrefixes, 
          combinedSuffixes, 
          upgradeTo as ItemRarity
        );
        
        // Ï†úÌïúÎêú Ï†ëÏÇ¨Îì§Ïùò Ïä§ÌÉØ Ïû¨Í≥ÑÏÇ∞
        let limitedAffixStats: Record<string, number> = {};
        [...limitedAffixes.prefixes, ...limitedAffixes.suffixes].forEach(affix => {
          limitedAffixStats = combineStats(limitedAffixStats, affix.stats || {});
        });
        
        // ÏµúÏ¢Ö Ïä§ÌÉØ Í≥ÑÏÇ∞ (Í∏∞Î≥∏ Ïä§ÌÉØ + Ï†úÌïúÎêú Ï†ëÏÇ¨ Ïä§ÌÉØ)
        const finalStats = combineStats(currentItem.baseStats || {}, limitedAffixStats);
        
        // ÏÉàÎ°úÏö¥ displayName ÏÉùÏÑ± (Ï†úÌïúÎêú Ï†ëÏÇ¨Î°ú)
        let newDisplayName = currentItem.name;
        if (limitedAffixes.prefixes.length > 0) {
          const prefixNames = limitedAffixes.prefixes.map(p => p.name).join(' ');
          newDisplayName = `${prefixNames} ${newDisplayName}`;
        }
        if (limitedAffixes.suffixes.length > 0) {
          const suffixNames = limitedAffixes.suffixes.map(s => s.name).join(' ');
          newDisplayName = `${newDisplayName} ${suffixNames}`;
        }
        
        upgradedItem = {
          ...currentItem,
          rarity: upgradeTo as GameItemRarity,
          prefixes: limitedAffixes.prefixes,
          suffixes: limitedAffixes.suffixes,
          affixStats: limitedAffixStats,
          stats: finalStats,
          displayName: newDisplayName,
          colorCode: rarityColors[upgradeTo as GameItemRarity],
          instanceId: selectedItem.instanceId
        };
        
      } else {
        // Í∏∞Î≥∏ ItemÏù∏ Í≤ΩÏö∞ - ÏÉàÎ°úÏö¥ GeneratedItem ÏÉùÏÑ±
        const baseItem: Item = {
          id: selectedItem.id,
          name: selectedItem.name,
          type: selectedItem.type,
          weight: selectedItem.weight || 1,
          requiredLevel: selectedItem.requiredLevel || 1,
          description: selectedItem.description,
          icon: selectedItem.icon,
          stats: selectedItem.stats || {},
          instanceId: selectedItem.instanceId
        };
        
        upgradedItem = {
          ...generateEnhancedItem(baseItem, upgradeTo as GameItemRarity),
          instanceId: selectedItem.instanceId
        };
      }
      
      console.log('ÏóÖÍ∑∏Î†àÏù¥Îìú Ï†Ñ:', selectedItem);
      console.log('ÏóÖÍ∑∏Î†àÏù¥Îìú ÌõÑ:', upgradedItem);
      
      // Ïù∏Î≤§ÌÜ†Î¶¨ÏóêÏÑú Í∏∞Ï°¥ ÏïÑÏù¥ÌÖúÏùÑ Ï†úÍ±∞ÌïòÍ≥† ÏÉà ÏïÑÏù¥ÌÖúÏùÑ Ï∂îÍ∞ÄÌï©ÎãàÎã§.
      removeItem(selectedUpgradeItemId);
      addItem(upgradedItem);

      // Ïù¥Î¶Ñ ÌëúÏãúÏö© - displayName Ïö∞ÏÑ† ÏÇ¨Ïö©
      const beforeName = ('displayName' in selectedItem) ? selectedItem.displayName || selectedItem.name : selectedItem.name;
      const afterName = upgradedItem.displayName || upgradedItem.name;
      
      console.log(`${beforeName}ÏùÑ(Î•º) ${afterName} (${upgradeTo} Îì±Í∏â)ÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥ÎìúÌñàÏäµÎãàÎã§!`);
      
      // Î™®Îã¨ ÌëúÏãú
      setModalResult({
        success: true,
        title: 'ÏóÖÍ∑∏Î†àÏù¥Îìú ÏÑ±Í≥µ!',
        message: `${beforeName} ‚Üí ${afterName}`
      });
      setShowResultModal(true);
    } else {
      // Ïã§Ìå® Ïãú ÏùºÎ∂Ä Ïû¨Î£å ÏÜêÏã§ (30%)
      // Ïù¥ÎØ∏ ÏúÑÏóêÏÑú Î™®Îì† Ïû¨Î£åÎ•º Ï†úÍ±∞ÌñàÏúºÎØÄÎ°ú, 70%Î•º Îã§Ïãú ÎèåÎ†§Ï£ºÎäî Î∞©ÏãùÏúºÎ°ú Íµ¨ÌòÑ
      requirements.forEach(req => {
        const refundAmount = Math.floor(req.count * 0.7); // 70% ÌôòÍ∏â
        const material = alchemyMaterials.find(m => m.id === req.materialId);
        if (material) {
          for (let i = 0; i < refundAmount; i++) {
            addMaterial(convertToMaterial(material));
          }
        }
      });

      console.log(`${selectedItem.name} ÏóÖÍ∑∏Î†àÏù¥ÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§...`);
      
      // Î™®Îã¨ ÌëúÏãú
      setModalResult({
        success: false,
        title: 'ÏóÖÍ∑∏Î†àÏù¥Îìú Ïã§Ìå®',
        message: `${selectedItem.name} ÏóÖÍ∑∏Î†àÏù¥ÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§...`
      });
      setShowResultModal(true);
    }
  };

  // Ïä§ÌÇ¨ Í∞ïÌôîÎäî Ïù¥Ï†ú SkillEnhancementWorkshopÏóêÏÑú Ï≤òÎ¶¨
  // const handleUpgradeSkill = (skillId: string, currentTier: number, useCatalyst = false) => {
  //   const result = upgradeSkill(skillId, currentTier, useCatalyst);
  //   console.log('Skill upgrade result:', result);
  // };

  return (
    <div className="simple-alchemy-container">
      <h2 className="simple-alchemy-title">Ïó∞Í∏àÏà† ÏûëÏóÖÎåÄ</h2>
      
      <div className="simple-tabs">
        <button 
          className={`simple-tab-button ${activeTab === 'craft' ? 'active' : ''}`}
          onClick={() => setActiveTab('craft')}
        >
          üß™ Ï†úÏûë
        </button>
        <button 
          className={`simple-tab-button ${activeTab === 'upgrade-item' ? 'active' : ''}`}
          onClick={() => setActiveTab('upgrade-item')}
        >
          ‚¨ÜÔ∏è ÏïÑÏù¥ÌÖú Í∞ïÌôî
        </button>
        <button 
          className={`simple-tab-button ${activeTab === 'upgrade-skill' ? 'active' : ''}`}
          onClick={() => setActiveTab('upgrade-skill')}
        >
          üîß Ïä§ÌÇ¨ Í∞ïÌôî
        </button>
      </div>

      <div className="simple-tab-content">
        {activeTab === 'craft' && (
          <div>
            <div className="materials-display">
              <h3 className="materials-title">Î≥¥Ïú† Ïû¨Î£å</h3>
              <div className="materials-grid-inventory-style">
                {alchemyMaterials.map(material => {
                  const count = getMaterialCount(material.id) || 0;
                  return (
                    <MaterialSlotWithTooltip
                      key={material.id}
                      material={convertToMaterial(material)}
                      count={count}
                    />
                  );
                })}
              </div>
            </div>

            {!selectedCategory ? (
              // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù ÌôîÎ©¥
              <div className="category-selection">
                <h3 className="category-title">Ï†úÏûëÌï† Ìè¨ÏÖò Ï¢ÖÎ•òÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</h3>
                <div className="category-grid">
                  {getPotionsByCategory(knownRecipes).map((category) => (
                    <div 
                      key={category.id}
                      className="category-card"
                      onClick={() => setSelectedCategory(category.id)}
                    >
                      <div className="category-icon">{category.icon}</div>
                      <h4 className="category-name">{category.name}</h4>
                      <p className="category-description">{category.description}</p>
                      <div className="category-recipes-count">
                        {category.recipes.length}Í∞úÏùò Î†àÏãúÌîº
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              // ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Î†àÏãúÌîºÎì§
              <div className="category-recipes">
                <div className="category-header">
                  <button 
                    className="back-button"
                    onClick={() => setSelectedCategory(null)}
                  >
                    ‚Üê Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉùÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
                  </button>
                  <h3>{getPotionsByCategory(knownRecipes).find(cat => cat.id === selectedCategory)?.name}</h3>
                </div>

                <div className="simple-recipe-grid">
                  {getPotionsByCategory(knownRecipes)
                    .find(cat => cat.id === selectedCategory)?.recipes
                    .map((recipe) => {
                      const canCraft = recipe.materials.every((mat) => 
                        (getMaterialCount(mat.id) || 0) >= mat.count
                      );

                      return (
                        <div 
                          key={recipe.id} 
                          className={`simple-recipe-card ${!canCraft ? 'unavailable' : ''}`}
                        >
                          <div className="recipe-header">
                            <h4 className="recipe-name">
                              {recipe.icon} {recipe.name}
                              {recipe.tier && (
                                <span className={`tier-badge tier-${recipe.tier}`}>
                                  {recipe.tier === 1 ? 'ÏûëÏùÄ' : recipe.tier === 2 ? 'Ï§ëÍ∞Ñ' : 'ÎåÄÌòï'}
                                </span>
                              )}
                            </h4>
                          </div>
                          <p className="recipe-description">{recipe.description}</p>
                          
                          <div className="recipe-materials">
                            {recipe.materials.map((mat) => {
                              const material = alchemyMaterials.find(m => m.id === mat.id);
                              const hasEnough = (getMaterialCount(mat.id) || 0) >= mat.count;
                              
                              return (
                                <span 
                                  key={mat.id} 
                                  className={`material-tag ${!hasEnough ? 'insufficient' : ''}`}
                                >
                                  {material?.name || mat.id} x{mat.count}
                                </span>
                              );
                            })}
                          </div>

                          {recipe.results && (
                            <div className="recipe-effects">
                              {recipe.results.map((result, idx) => (
                                <div key={idx} className="effect-item">
                                  {getPotionDisplayName(result.id)} x{result.count}
                                </div>
                              ))}
                            </div>
                          )}

                          <div className="recipe-success-rate">
                            ÏÑ±Í≥µÎ•†: {recipe.successRate}%
                          </div>

                          <div className="action-buttons">
                            <button 
                              className="craft-button" 
                              disabled={!canCraft}
                              onClick={() => handleCraft(recipe.id)}
                            >
                              Ï†úÏûëÌïòÍ∏∞
                            </button>
                          </div>
                        </div>
                      );
                    })}
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'upgrade-item' && (
          <div>
            <div className="upgrade-section">
              <h3 className="upgrade-title">ÏïÑÏù¥ÌÖú Í∞ïÌôî</h3>
              
              {!selectedUpgradeType ? (
                // Í∞ïÌôî ÌÉÄÏûÖ ÏÑ†ÌÉù
                <div className="upgrade-type-selection">
                  <h4>Í∞ïÌôîÌï† Îì±Í∏âÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:</h4>
                  
                  {/* ÌÖåÏä§Ìä∏Ïö© ÏïÑÏù¥ÌÖú Ï∂îÍ∞Ä Î≤ÑÌäº */}
                  <div style={{marginBottom: '20px', padding: '10px', backgroundColor: 'rgba(255,0,0,0.1)', borderRadius: '8px'}}>
                    <h5>ÌÖåÏä§Ìä∏Ïö© ÏïÑÏù¥ÌÖú Ï∂îÍ∞Ä:</h5>
                    <button 
                      onClick={() => {
                        const testItem: Item = {
                          id: 'test-weapon-' + Date.now(),
                          instanceId: 'test-weapon-' + Date.now(),
                          name: 'ÌÖåÏä§Ìä∏ Í≤Ä',
                          type: 'weapon',
                          weight: 2.0,
                          rarity: 'common',
                          description: 'ÌÖåÏä§Ìä∏Ïö© ÏùºÎ∞ò Î¨¥Í∏∞',
                          stats: {}
                        };
                        addItem(testItem);
                        console.log('ÌÖåÏä§Ìä∏ ÏïÑÏù¥ÌÖú Ï∂îÍ∞Ä:', testItem);
                      }}
                      style={{margin: '5px', padding: '5px 10px'}}
                    >
                      ÏùºÎ∞ò Î¨¥Í∏∞ Ï∂îÍ∞Ä
                    </button>
                    <button 
                      onClick={() => {
                        const testItem: Item = {
                          id: 'test-armor-' + Date.now(),
                          instanceId: 'test-armor-' + Date.now(),
                          name: 'ÌÖåÏä§Ìä∏ Í∞ëÏò∑',
                          type: 'armor',
                          weight: 5.0,
                          rarity: 'magic',
                          description: 'ÌÖåÏä§Ìä∏Ïö© Îß§ÏßÅ Í∞ëÏò∑',
                          stats: {}
                        };
                        addItem(testItem);
                        console.log('ÌÖåÏä§Ìä∏ ÏïÑÏù¥ÌÖú Ï∂îÍ∞Ä:', testItem);
                      }}
                      style={{margin: '5px', padding: '5px 10px'}}
                    >
                      Îß§ÏßÅ Í∞ëÏò∑ Ï∂îÍ∞Ä
                    </button>
                    <button 
                      onClick={() => {
                        // ÌÖåÏä§Ìä∏Ïö© Ïû¨Î£åÎì§ Ï∂îÍ∞Ä
                        const materials = ['essence-fragment', 'monster-blood', 'bone-dust'];
                        materials.forEach(matId => {
                          for(let i = 0; i < 10; i++) {
                            const material: Material = {
                              id: matId,
                              name: matId,
                              type: 'material',
                              weight: 0.1,
                              description: 'ÌÖåÏä§Ìä∏Ïö© Ïû¨Î£å',
                              rarity: 'common',
                              effects: []
                            };
                            addMaterial(material);
                          }
                        });
                        console.log('ÌÖåÏä§Ìä∏ Ïû¨Î£å Ï∂îÍ∞Ä ÏôÑÎ£å');
                      }}
                      style={{margin: '5px', padding: '5px 10px'}}
                    >
                      Ïû¨Î£å Ï∂îÍ∞Ä (Í∞Å 10Í∞ú)
                    </button>
                    <button 
                      onClick={() => {
                        console.log('ÌòÑÏû¨ Ïù∏Î≤§ÌÜ†Î¶¨ ÏïÑÏù¥ÌÖúÎì§:', inventoryItems);
                        console.log('ÌòÑÏû¨ Ïû¨Î£åÎì§:', inventoryMaterials);
                      }}
                      style={{margin: '5px', padding: '5px 10px'}}
                    >
                      Ïù∏Î≤§ÌÜ†Î¶¨ ÌôïÏù∏
                    </button>
                  </div>

                  <div className="upgrade-type-buttons">
                    <button 
                      className="upgrade-type-button"
                      onClick={() => setSelectedUpgradeType('normal-to-magic')}
                    >
                      <div className="upgrade-type-info">
                        <span className="upgrade-type-name">ÏùºÎ∞ò ‚Üí Îß§ÏßÅ</span>
                        <span className="upgrade-type-desc">Í∏∞Î≥∏ ÏïÑÏù¥ÌÖúÏùÑ Îß§ÏßÅ Îì±Í∏âÏúºÎ°ú</span>
                      </div>
                    </button>
                    <button 
                      className="upgrade-type-button"
                      onClick={() => setSelectedUpgradeType('magic-to-rare')}
                    >
                      <div className="upgrade-type-info">
                        <span className="upgrade-type-name">Îß§ÏßÅ ‚Üí Î†àÏñ¥</span>
                        <span className="upgrade-type-desc">Îß§ÏßÅ ÏïÑÏù¥ÌÖúÏùÑ Î†àÏñ¥ Îì±Í∏âÏúºÎ°ú</span>
                      </div>
                    </button>
                    <button 
                      className="upgrade-type-button"
                      onClick={() => setSelectedUpgradeType('rare-to-unique')}
                    >
                      <div className="upgrade-type-info">
                        <span className="upgrade-type-name">Î†àÏñ¥ ‚Üí Ïú†ÎãàÌÅ¨</span>
                        <span className="upgrade-type-desc">Î†àÏñ¥ ÏïÑÏù¥ÌÖúÏùÑ Ïú†ÎãàÌÅ¨ Îì±Í∏âÏúºÎ°ú</span>
                      </div>
                    </button>
                  </div>
                </div>
              ) : !selectedUpgradeItemId ? (
                // ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù
                <div className="item-selection">
                  <div className="selection-header">
                    <h4>
                      {selectedUpgradeType === 'normal-to-magic' && 'ÏùºÎ∞òÎì±Í∏â ‚Üí Îß§ÏßÅÎì±Í∏â Í∞ïÌôîÌï† ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù'}
                      {selectedUpgradeType === 'magic-to-rare' && 'Îß§ÏßÅÎì±Í∏â ‚Üí Î†àÏñ¥Îì±Í∏â Í∞ïÌôîÌï† ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù'}
                      {selectedUpgradeType === 'rare-to-unique' && 'Î†àÏñ¥Îì±Í∏â ‚Üí Ïú†ÎãàÌÅ¨Îì±Í∏â Í∞ïÌôîÌï† ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù'}
                    </h4>
                    <button 
                      className="back-button"
                      onClick={() => setSelectedUpgradeType(null)}
                    >
                      ‚Üê Îã§Î•∏ Îì±Í∏â ÏÑ†ÌÉù
                    </button>
                  </div>
                  
                  <div className="item-selection-container">
                    {(() => {
                      // ÏÑ†ÌÉùÎêú Í∞ïÌôî ÌÉÄÏûÖÏóê ÎßûÎäî ÏïÑÏù¥ÌÖú ÌïÑÌÑ∞ÎßÅ
                      const targetRarity = selectedUpgradeType === 'normal-to-magic' ? 'common' :
                                         selectedUpgradeType === 'magic-to-rare' ? 'magic' :
                                         selectedUpgradeType === 'rare-to-unique' ? 'rare' : null;
                      
                      console.log('=== ÏïÑÏù¥ÌÖú ÌïÑÌÑ∞ÎßÅ ÎîîÎ≤ÑÍ∑∏ ===');
                      console.log('ÏÑ†ÌÉùÎêú Í∞ïÌôî ÌÉÄÏûÖ:', selectedUpgradeType);
                      console.log('ÌÉÄÍ≤ü Îì±Í∏â:', targetRarity);
                      console.log('Ï†ÑÏ≤¥ Ïù∏Î≤§ÌÜ†Î¶¨ ÏïÑÏù¥ÌÖú:', inventoryItems);
                      console.log('ÏïÑÏù¥ÌÖú Í∞úÏàò:', inventoryItems.length);
                      console.log('Ï§ëÎ≥µ Ï≤¥ÌÅ¨:', inventoryItems.map(item => `${item.name} (${item.instanceId})`));
                      
                      const availableItems = inventoryItems.filter(item => {
                        const itemRarity = item.rarity || 'common';
                        const isEquipment = item.type === 'weapon' || item.type === 'armor' || item.type === 'accessory';
                        const rarityMatch = itemRarity === targetRarity;
                        const matches = rarityMatch && isEquipment;
                        
                        console.log(`ÏïÑÏù¥ÌÖú: ${item.name} (ID: ${item.instanceId})`);
                        console.log(`- ÏïÑÏù¥ÌÖú Îì±Í∏â: "${itemRarity}", ÌÉÄÍ≤ü Îì±Í∏â: "${targetRarity}", Îì±Í∏â Îß§Ïπò: ${rarityMatch}`);
                        console.log(`- ÏïÑÏù¥ÌÖú ÌÉÄÏûÖ: ${item.type}, Ïû•ÎπÑÏù∏Í∞Ä: ${isEquipment}`);
                        console.log(`- ÏµúÏ¢Ö Îß§Ïπò: ${matches}`);
                        console.log('---');
                        return matches;
                      });
                      
                      console.log('ÌïÑÌÑ∞ÎßÅÎêú ÏïÑÏù¥ÌÖú:', availableItems);
                      
                      return availableItems.length > 0 ? (
                        <div className="space-y-2 max-h-64 overflow-y-auto">
                          {availableItems.map(item => (
                            <SelectableItem
                              key={item.instanceId}
                              item={item}
                              isSelected={selectedUpgradeItemId === item.instanceId}
                              onClick={() => setSelectedUpgradeItemId(item.instanceId || null)}
                            />
                          ))}
                        </div>
                      ) : (
                        <div className="no-equipment-message">
                          Ìï¥Îãπ Îì±Í∏âÏùò ÏïÑÏù¥ÌÖúÏù¥ Ïù∏Î≤§ÌÜ†Î¶¨Ïóê ÏóÜÏäµÎãàÎã§.
                        </div>
                      );
                    })()}
                  </div>
                </div>
              ) : (
                // Í∞ïÌôî ÏßÑÌñâ
                <div className="upgrade-confirmation">
                  <div className="materials-display">
                    <h4>Í∞ïÌôîÌï† ÏïÑÏù¥ÌÖú:</h4>
                    {(() => {
                      const selectedItem = inventoryItems.find(item => item.instanceId === selectedUpgradeItemId);
                      if (!selectedItem) return <div className="no-item-selected">ÏÑ†ÌÉùÎêú ÏïÑÏù¥ÌÖúÏù¥ ÏóÜÏäµÎãàÎã§.</div>;
                      
                      return (
                        <UpgradeItemSlot 
                          item={selectedItem}
                          onCancel={() => setSelectedUpgradeItemId(null)}
                        />
                      );
                    })()}
                  </div>
                  
                  <div className="upgrade-grid">
                    {(() => {
                      const selectedItem = inventoryItems.find(item => item.instanceId === selectedUpgradeItemId);
                      if (!selectedItem) return null;
                      
                      const fromRarity = selectedItem.rarity || 'common';
                      const toRarity = selectedUpgradeType === 'normal-to-magic' ? 'magic' :
                                     selectedUpgradeType === 'magic-to-rare' ? 'rare' :
                                     selectedUpgradeType === 'rare-to-unique' ? 'unique' : null;
                      
                      if (!toRarity) return null;

                      const requirements = alchemyMaterials
                        .slice(0, 3)
                        .map(mat => ({ materialId: mat.id, count: 5 }));

                      // Ïû¨Î£å Ï∂©Ï°± Ïó¨Î∂ÄÎßå ÌôïÏù∏ (Í∏∞Ï°¥ canUpgradeItemÏùÄ ÎÑàÎ¨¥ Î≥µÏû°)
                      const canUpgrade = requirements.every(req => {
                        const currentCount = getMaterialCount(req.materialId) || 0;
                        return currentCount >= req.count;
                      });

                      return (
                        <div className="upgrade-card">
                          <div className="upgrade-type">
                            {getRarityKoreanName(fromRarity)} ‚Üí {getRarityKoreanName(toRarity)}
                          </div>
                          
                          <div className="upgrade-requirements">
                            <h4>ÌïÑÏöî Ïû¨Î£å:</h4>
                            <div className="requirements-grid">
                              {requirements.map(req => {
                                const material = alchemyMaterials.find(m => m.id === req.materialId);
                                const hasEnough = (getMaterialCount(req.materialId) || 0) >= req.count;
                                const currentCount = getMaterialCount(req.materialId) || 0;
                                
                                return (
                                  <div key={req.materialId} className="requirement-slot">
                                    <div className={`requirement-item-display ${!hasEnough ? 'insufficient' : ''}`}>
                                      <div className="requirement-icon">
                                        {material?.icon || 'üß™'}
                                      </div>
                                      <div className="requirement-info">
                                        <div className="requirement-name">{material?.name}</div>
                                        <div className={`requirement-count ${!hasEnough ? 'text-red-400' : 'text-green-400'}`}>
                                          {currentCount} / {req.count}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>

                          <div className="upgrade-success-rate">ÏÑ±Í≥µÎ•†: 75%</div>

                          <div className="action-buttons">
                            <button 
                              className="upgrade-button"
                              disabled={!canUpgrade}
                              onClick={() => {
                                console.log('Í∞ïÌôî Î≤ÑÌäº ÌÅ¥Î¶≠!');
                                console.log('toRarity:', toRarity);
                                console.log('Í∞ïÌôî Í∞ÄÎä• ÏÉÅÌÉú:', canUpgrade);
                                console.log('ÌïÑÏöî Ïû¨Î£å:', requirements.map(req => ({
                                  material: req.materialId,
                                  needed: req.count,
                                  have: getMaterialCount(req.materialId) || 0
                                })));
                                console.log('canUpgrade:', canUpgrade);
                                handleUpgradeItem(toRarity);
                              }}
                            >
                              Í∞ïÌôîÌïòÍ∏∞
                            </button>
                            <button 
                              className="cancel-button"
                              onClick={() => setSelectedUpgradeItemId(null)}
                            >
                              Îã§Î•∏ ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù
                            </button>
                          </div>
                        </div>
                      );
                    })()}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'upgrade-skill' && (
          <SkillEnhancementWorkshop />
        )}
      </div>

      {lastCraftResult && (
        <div className="materials-display">
          <h4>Í≤∞Í≥º: {lastCraftResult}</h4>
        </div>
      )}

      {/* ÏóÖÍ∑∏Î†àÏù¥Îìú Í≤∞Í≥º Î™®Îã¨ */}
      {showResultModal && modalResult && (
        <div className="modal-overlay" onClick={() => setShowResultModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className={`modal-header ${modalResult.success ? 'success' : 'failure'}`}>
              <h3>{modalResult.title}</h3>
            </div>
            <div className="modal-body">
              <p>{modalResult.message}</p>
            </div>
            <div className="modal-footer">
              <button 
                className="modal-button"
                onClick={() => {
                  setShowResultModal(false);
                  // Î™®Îã¨ÏùÑ Îã´ÏùÑ ÎïåÎßå ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî (ÏÑ±Í≥µÌïú Í≤ΩÏö∞)
                  if (modalResult.success) {
                    setSelectedUpgradeItemId(null);
                    setSelectedUpgradeType(null);
                  }
                }}
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AlchemyWorkshop;